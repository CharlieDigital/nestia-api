/**
 * @packageDocumentation
 * @module api.functional.workflow
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { MinLength } from "typia/lib/tags/MinLength";

import type { IWorkflow } from "../../structures/IWorkflow";

export * as root from "./root";
export * as update from "./update";
export * as db from "./db";

/**
 * Can it generate a random workflow hierarchy?
 * curl http://localhost:3000/workflow/asdf | jq
 * @controller AppController.getRandomWorkflow
 * @path GET /workflow/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getRandomWorkflow(
  connection: IConnection,
  id: string & MinLength<1>,
): Promise<getRandomWorkflow.Output> {
  return PlainFetcher.fetch(connection, {
    ...getRandomWorkflow.METADATA,
    template: getRandomWorkflow.METADATA.path,
    path: getRandomWorkflow.path(id),
  });
}
export namespace getRandomWorkflow {
  export type Output = IWorkflow;

  export const METADATA = {
    method: "GET",
    path: "/workflow/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & MinLength<1>) =>
    `/workflow/${encodeURIComponent(id?.toString() ?? "null")}`;
}
