/**
 * @packageDocumentation
 * @module api.functional.workflow.db
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { MinLength } from "typia/lib/tags/MinLength";

/**
 * What does the code look like to get it from a DB?
 * curl http://localhost:3000/workflow/db/asdf | jq
 * @controller AppController.getDbWorkflow
 * @path GET /workflow/db/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getDbWorkflow(
  connection: IConnection,
  id: string & MinLength<1>,
): Promise<getDbWorkflow.Output> {
  return PlainFetcher.fetch(connection, {
    ...getDbWorkflow.METADATA,
    template: getDbWorkflow.METADATA.path,
    path: getDbWorkflow.path(id),
  });
}
export namespace getDbWorkflow {
  export type Output = {
    id: string & MinLength<1>;
    steps: {
      id: string & MinLength<1>;
      name: string & MinLength<1>;
      description?: undefined | string;
      order: number;
    }[];
  };

  export const METADATA = {
    method: "GET",
    path: "/workflow/db/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & MinLength<1>) =>
    `/workflow/db/${encodeURIComponent(id?.toString() ?? "null")}`;
}
