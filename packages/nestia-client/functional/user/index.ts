/**
 * @packageDocumentation
 * @module api.functional.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Type } from "typia/lib/tags/Type";

import type { IUser } from "../../structures/IUser";

/**
 * Testing the typia.random generator on simple object response
 * curl http://localhost:3000/user/5 | jq
 * curl http://localhost:3000/user/asdf | jq
 * @controller AppController.getRandomUser
 * @path GET /user/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getRandomUser(
  connection: IConnection,
  id: number & Type<"int32">,
): Promise<getRandomUser.Output> {
  return PlainFetcher.fetch(connection, {
    ...getRandomUser.METADATA,
    template: getRandomUser.METADATA.path,
    path: getRandomUser.path(id),
  });
}
export namespace getRandomUser {
  export type Output = IUser;

  export const METADATA = {
    method: "GET",
    path: "/user/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: number & Type<"int32">) =>
    `/user/${encodeURIComponent(id?.toString() ?? "null")}`;
}
